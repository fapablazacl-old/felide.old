
Proyecto 'felide'


PROBLEMATICA

	Los IDEs modernos se enfocan mucho en stack de tecnologias muy mainstream, como PHP, Node.js, dejando de lado lenguajes muy potentes como C/C++, Rust o Haskell, implementando un soporte bastante incompleto y deficiente.
	
	- Visual Studio es muy bueno mientras se use su propio gestor de proyectos. Al emplear CMake, se vuelve tedioso agregar o modificar archivos. Ademas, sus herramientas RAD no hacen ni la sombra a lo que se ofrece para otras tecnologías, como por ejemplo C# (principal foco de Microsoft). Otro punto importante es que está basado en .NET, por lo que de vez en cuando experimenta letargos bastante frecuentes luego de varias horas de iniciado el IDE, incluso en equipos con varios GigaBytes de RAM y 8 nucleos de CPU. Al contrario que los otros IDEs analizados, tiene el mejor depurador existente en el mercado, haciendo que las sesiones de depuracion sean bastantes agradables y placenteras.
	
	- Qt Creator es excelente para desarrollo de aplicaciones Qt. Del mismo modo que VS, Qt Creator hace tediosa la tarea de agregar o modificar archivos. Es mejor que VS al ofrecer coloreado de sintaxis incluso para documentacion Doxygen (practicamente ya un estandar), e incluye ciertas facilidades de generacion de codigo de las que Visual Studio carece. Su soporte de CMake es bastante bueno, mejor que VS. Sin embargo, su nivel de depuracion palidece en comparacion al de Visual Studio. Desconozco si esto es por la implementacion en Qt, o es por la calidad de GDB. Otro punto es que su interfaz de usuario es totalmente orientada al workflow de desarrollo en Qt, por lo que se hace incomodo el uso de este IDE para otros propositos de desarrollo.
	
	- Code::Blocks es un esfuerzo de la comunidad para proveer un entorno de desarrollo libre y gratuito. Soporta muchos compiladores, y es multiplataforma. Su integracion con CMake no permite usar un depurador.
	
	¿Por qué Cmake es importante?
	La tendencia de proyectos muestra que Cmake se esta convirtiendo en el Build-System defacto para el lenguaje C/C++, por lo que un soporte de primera categoria es escencial.


REQUERIMIENTOS

1. Requerimientos no funcionales.
	Extensible y Ligero, que no desperdicie recursos internos en cosas absurdas que no ayudan directamente al usuario, como Garbage Collection, recoleccion de uso, etc.
	
2. Gestion de Workspaces. 
	La gestion de workspaces consiste en la forma que el IDE permite que el usuario maneje el codigo fuente que comprende una solucion de software. Existen algunos gestores que muestran la estructura logica de la solucion (como es el caso de Visual Studio), o muestran directamente la estructura fisica de la solucion (KDevelop, Eclipse, etc), o ambas vistas.
	
	La forma en que los workspaces se gestionan depende mucho del sistema de construccion empleado. Se debe considerar que el sistema de construccion no solamente sirve para generar librerias y ejecutables, si no que para muchas otras tareas adicionales, dependiendo del target (pero ese es otro tema). 
	
	Se reconocen las siguientes formas de gestion de workspaces:
		- Nativa. Una forma nativa de gestion de workspaces es la que proporciona el IDE, con el fin de orquestrar todo el proceso de construccion. Es necesaria cuando el Usuario no desea o no puede usar CMake.
		- Basado en CMake. Es obligatorio soportar CMake por las razones expuestas anteriormente, y asi mismo soportar otros tipos de proyectos, como Makefiles.
		- Basado en Makefiles. Aun a día de hoy, existen muchos proyectos Open Source que usan makefiles para soportar sus procesos de desarrollo, por lo que seria util proveer soporte para ellos tambien.
		
3. Multi Lenguaje. 
	Algunas veces es necesario soportar workspaces implementados en distintas pilas de tecnologias (como proyectos hibridos en C/C++ y Python, Lua, etc), y de ser posible, soportar depuracion inter-lenguaje, ya que eso ayudaria mucho en proyectos de integración de software.
	El IDE debe estar construido de forma lenguaje-neutral, para evitar los problemas de consistencia que se ven en Eclipse, Code::Blocks, etc.

4. Depurador. 
	Una de las cosas que más diferencia un IDE de un Editor de Codigo es el Depurador. Por otro lado, el 60% del tiempo de desarrollo se emplea en la correccion de bugs, por lo que se necesita de un depurador de muy alta calidad, que permita mostrar valores de variables, cambios, direcciones de memoria, etc, y de ser posible, que pueda soportar depuracion multilenguaje.
	
5. Intellisense - Like
	Implementar una caracteristica similar a Intellisense, que pueda mostrar una entidad de codigo, sus paramatros de entrada, de salida, así como su documentación (si está disponible)
	
	
PROPUESTA DE SOLUCION

Entidades y relaciones conceptuales.

	Para entender mejor las funcionalidades es necesario definir primero ciertos conceptos basicos:
	
	- Usuario: Es la persona que usa el IDE.
	
	- IDE: Es el Entorno de Desarrollo Integrado. La ventana principal del IDE se divide en 4 partes: Cuerpo y en las secciones Izquierda, Abajo y Derecha.
	
	- Proyecto: Un proyecto es la unidad fundamental central de trabajo del IDE. Un Proyecto consiste en una colección de Componentes. El IDE puede abrir solamente un unico proyecto simultaneamente.
	
	- Componente: Un Componente es una unidad de software en terminos arquitectónicos. Este componente puede ser un Ejecutable, una Libreria, o cualquier otro elemento que deba ser generado durante el proceso de construcción. Cada componente a su vez consiste en una serie de Items. 
	
	- Item: Un Item es la unidad fundamental de contenido de logica y/o de informacion de un componente. Puede ser un archivo de codigo fuente, de configuracion, de texto, de recurso, etc.
	
	- Ventana: Una Ventana es un elemento de UI que muestra y opcionalmente permite modificar un aspecto del IDE o del Proyecto. Las Ventanas se pueden acoplar libremente en las secciones Izquierda, Abajo y Derecha.
	
	- Vista: Una Vista es un elemento de UI que visualiza y opcionalmente permite modificar un Item. Se pueden acoplar al Cuerpo del IDE como una pestaña y desacoplar en una ventana independiente del IDE.
	
Funcionalidades

	1. Interfaz de Usuario Modular y personalizable.	
	
		El entorno de desarrollo es una aplicación de escritorio cuyo propósito principal es la edición de documentos. 
		
		Un documento es cualquier entidad con datos asociados que se modifique directamente por el usuario. Algunos ejemplos de esto son los codigos fuentes, modelos de bases de datos, paginas HTML, etc. Cada documento posee uno o más tipos de editores asociados, donde cada uno representa una vista distinta sobre el mismo documento (nota de implementación: un patrón apropiado es MVC en conjunto con un gestor de editores). 
		
		La dispocicion de los elementos en este tipo de interfaz de usuario es totalmente personalizable y persistente. Se trata de imitar un poco a Visual Studio en este sentido. La ventana principal del IDE se divide en 5 secciones: Center, Footer, Left Panel y Right Panel. Las ventadas de edición de documentos solo pueden estar contenidas dentro la sección principal, y ser desacopladas del IDE, ya que de esta forma se puede lograr mostrar multiples documentos en distintas partes del monitor, e incluso en monitores distintos. Eso abre la necesidad de que cada ventana de edición pueda poseer su propio layout, con sus propios controles internos.
		
		Al contrario que la sección principal, las secciones Footer, Left Panel y Right Panel pueden poseer Ventanas. Las Ventanas son Widgets que se encargan mostrar información, logs, estructuras jerarquicas, propiedades, etc, es decir, el resto de datos que no son documentos y que pueden estar relacionados tanto al IDE como a las propiedades del documento en sí.
		
		Así, se reconocen las siguientes ventanas de propiedades:
		
			- Log del IDE. Enfocada a los desarrolladores del mismo IDE y a los desarrolladores de plugins, esta ventana muestra una descripción de todos las operaciones internas de cierto nivel en el IDE. Su utilidad radica en que permite a los desarrolladores determinar las acciones que acontecieron en caso de que ocurra un error, o para determinar cual es la causa real de algun error de logica en el IDE o en algun plugin.
			
			- Salida. Muestra el resultado de la salida estandar del proceso actual en ejecución o depuración. En sistemas Windows se usará esta ventana versus la ventana de MSDOS que se suele mostrar para las Aplicaciones de Consola (caracteristica a definir)
			
			- Proyecto. La ventana de Proyecto muestra la estructura del proyecto actualmente abierto, asi como sus componentes, ejecutables, codigos fuentes, bibliotecas, versiones, archivos de interfaz de usuario, etc. 
			
	2. Modo Edicion
		El modo edicion es el modo en el cual el IDE esta configurado para realizar todas las tareas disponibles de depuracion.
		
		El editor de codigo fuente debe ser capaz de proveer todas las funcionalidades minimas que se esperan durante las actividades de edición de codigo, ya que es el foco principal durante la fase de implementación. El editor de código fuente debe proveer la siguiente información:
		
		- Coloreado de Sintaxis. El coloreado de sintaxis permite identificar rapidamente las categorias de los elementos de codigo por medio de los colores que tengan los textos dentro de un codigo fuente, tales como clases, variables, etc. Esta caracteristica se puede cambiar a gusto del usuario.
		
		- Listado de elementos de código. Los elementos de codigo son todas las entidades que crea el programador mientras programa, estas son clases, metodos, variables, paquetes, etc.
		- Muestra de documentación del elemento actual de codigo, esto eso: nombre de la entidad, parametros de entrada, etc, y la muestra de la documentacion respectiva (si es que existe).
		- Muestra de la linea actual en donde se encuentra el cursor.
		- 
		- Configuracion de la tabulacion. Configura cuantos espacios se usan para tabular de forma automatica. Se overlapea con el estilo de codigo fuente.
		- Configuracion de estilo de codigo fuente. Configura de que estilo debe ser el codigo fuente que escribe el usuario. Estos estilos son unicos para cada lenguaje. Por ejemplo, 
		- Configuracion de la muestra de estos elementos. El usuario debe ser capaz de configurar cuales de todas estas configuraciones se aplican 
		
		NOTA: [Existe cierto overlap con las capacidades de refactorizacion, por lo que le daremos una vuelta mas adelante]
		
	3. Modo Depuracion
		El depurador permite que el usuario pueda ver lo que sucede internamente durante la ejecucion de un programa. Al iniciar el proceso de depuracion, el IDE entra en el modo depuracion, en donde se habilitan el siguiente set de acciones:
		
		- Breakpoints.
		- Iniciar, Continuar, Detener y Pausar Depuración
		- Ejecucion guiada (siguiente linea, salida de la funcion, ingreso a la funcion).
		
		Y de Ventanas:
		- Inspecciones
		- Desensamblado.
		- Variables y parametros Locales 
		
		Durante el modo depuracion el programa puede estar en ejecucion o pausado. Es cuando se encuentre pausado es que se encuentran disponibles las ventanas de Desensamblado y de Variables y Parametros Locales. Ademas, en este estado se pueden ver directamente los valores de las variables directamente en el editor de codigo fuente. Este editor 
		
	4. Modo Perfilador.
		
		
	5. Extensiones del entorno de desarrollo
	
	
	6. Extension del lenguaje C/C++.
	
	
	7. Extension del lenguage GLSL.
	
	
	8. Extension del lenguaje Python.
	
Arquitectura de Software.

	1. Core del IDE programado en C++17 y basado en Plugins.
		El Core del IDE es el núcleo que provee todas las funcionalidades básicas del entorno de desarrollo. Estas funcionalidades se resumen, pero no estan limitadas a:
			- Gestión de Plugins.
			- Facilidades para la Orquestración del proceso de construcción.
			- Facilidades para el Manejo de los workspaces y de los proyectos.
			- Facilidades para la depuración de ejecutables.
			
		- C/C++ permite interoperar directamente con el sistema operativo y con otras pilas de tecnologias. 
		- C/C++ permite tener un control absoluto sobre el manejo de memoria y de los recursos del sistema, evitando de esta forma los retardos por garbage collection.
		
	2. Basado en Plugins.
		Los plugins permiten que se pueda extender la funcionalidad del IDE de forma casi totalmente flexible una vez lanzado al mercado.
		Las caracteriscias escenciales del IDE (como lenguajes, backends de depuradores, etc), podrían ser implementadas vía plugins "oficiales"
		
		El usuario puede ver una interfaz de usuario, llamada Gestor de Plugins. En el Gestor de Plugins, el usuario puede:
			- Ver todos los plugins disponibles.
			- Instalar o Desinstalar plugins.
			- Consultar informacion sobre los plugins (estado y version).
			- Manipular los plugins (iniciar, deneter, habilitar, deshabilitar).
		
		Los plugins se pueden implementar en C++ siempre que se requieran condiciones precisas de rendimiento, para acceder a ciertos recursos del S.O, entre otras aplicaciones.
		
		En el caso de los lenguajes de scripting, éstos se pueden usar para implementar lógica tediosa, como manipulacion de cadenas, generadores de proyectos/codigo, etc.
		Los lenguajes considerados hasta el momento son:

			ChaiScript
			ChaiScript esta especialmente diseñado para integrarse a aplicaciones C++, aunque actualmente ChaiScript aun no dispone de ejecución en bytecode (aunque se encuentra en desarrollo por parte de los autores), por lo que en las primeras versiones
			
			Lua
			Lua es bien conocido en la comunidad, ya que se usa en una gran cantidad de aplicaciones como lenguaje de scripting embedido. Dispone de ejecucion por interprete y por byte code, por lo que cumple muy bien con los requerimientos de rendimiento expuestos anteriormente. 
			
